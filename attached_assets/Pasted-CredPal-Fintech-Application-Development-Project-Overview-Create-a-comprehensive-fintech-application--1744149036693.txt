CredPal Fintech Application Development
Project Overview
Create a comprehensive fintech application called CredPal with the following components:
Backend (NestJS + MySQL)

User account management with secure authentication (JWT)
Transaction management (deposits, withdrawals, transfers)
Balance tracking and management
RESTful API endpoints with proper validation
Swagger documentation
TypeORM integration with MySQL

Frontend (React + TypeScript)

Authentication pages (Login/Register)
Wallet dashboard with balance overview
Transaction history display
Wallet operations (funding, transfers)
Responsive design following the provided Figma designs

Backend Requirements
1. User Account Management

Create a user module with registration, login endpoints using JWT authentication
Implement password hashing with bcrypt
Store user data in MySQL (name, email, password hash)
Create proper DTOs with validation

2. Transaction Management

Implement transaction types (deposit, withdrawal, transfer)
Create endpoints for each transaction type
Store transaction history with amount, type, timestamp, sender/receiver details
Update account balances after transactions

3. Balance Management

Track user balances in a separate table/entity
Update balances automatically after transactions
Provide endpoint to fetch current balance

4. Database Design

User entity: id, name, email, password, created_at, updated_at
Transaction entity: id, user_id, amount, type, recipient_id (for transfers), description, created_at
Balance entity: id, user_id, amount, updated_at

5. API Endpoints

POST /auth/register - Create new user account
POST /auth/login - Authenticate user and return JWT
GET /wallet/balance - Get current user balance
POST /wallet/fund - Add funds to wallet
POST /wallet/withdraw - Remove funds from wallet
POST /wallet/transfer - Transfer funds to another user
GET /transactions - Get transaction history

Frontend Requirements
1. Authentication Pages

Login page with email/password fields
Registration page with name, email, password fields
Form validation and error handling
JWT storage in localStorage/cookies

2. Wallet Dashboard (Protected Route)

Balance display section
Quick action buttons for funding and transfers
Transaction history table showing date, description, amount, type
Implement pagination for transaction history

3. Wallet Operations

Fund wallet form with amount and mocked payment method
Transfer form with recipient email, amount, optional note
Success/error notifications

4. State Management

Implement Context API or Redux for state management
Create auth context to manage user authentication state
Create wallet context for balance and transaction data

5. Technical Implementation

Use TypeScript for type safety
Axios for API communication
Form validation with Yup/Formik
Responsive design for mobile and desktop
Loading states and error handling
Unit testing with Jest/Vitest

Additional Requirements

Proper error handling on both frontend and backend
Input validation on all forms
Secure authentication flow
Clean code organization with proper architecture
Documentation for API endpoints using Swagger